# -*- coding: utf-8 -*-
"""tennis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bKyPHZvKizJlI2_kUnp5wdeVDaW6URCG
"""

import codecademylib3_seaborn
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# load and investigate the data here:
df = pd.read_csv("tennis_stats.csv")
print(df.head())
print(df.info())
print(df.describe())

# perform exploratory analysis here:

"""
# Aces and Winsã€€(So-so correlational relationship)
x1=df[["Aces"]].copy()
y1=df[["Wins"]].copy()

plt.scatter(x1, y1)
plt.title("Aces and Wins")
plt.xlabel("Aces")
plt.ylabel("Wins")
plt.show()
"""

# ReturnPointsWon and Wins (no correlational relationship)
"""
x1 = df[["ReturnPointsWon"]].copy()
y1 = df[["Wins"]].copy()

plt.scatter(x1, y1)
plt.title("ReturnPointsWon and Wins")
plt.xlabel("ReturnPointsWon")
plt.ylabel("Wins")
plt.show()
"""

"""
# TotalServicePointsWon and Wins (no correlational relationship)
x1 = df[["TotalServicePointsWon"]].copy()
y1 = df[["Wins"]].copy()

plt.scatter(x1, y1)
plt.title("TotalServicePointsWon and Wins")
plt.xlabel("TotalServicePointsWon")
plt.ylabel("Wins")
plt.show()
"""

"""
# ServiceGamesWon and Wins (so-so correlational relationship)
x1 = df[["ServiceGamesWon"]].copy()
y1 = df[["Wins"]].copy()

plt.scatter(x1, y1)
plt.title("ServiceGamesWon and Wins")
plt.xlabel("ServiceGamesWon")
plt.ylabel("Wins")
plt.show()
"""

"""
# ReturnGamesWon and Wins (no correlational relationship)
x1 = df[["ReturnGamesWon"]].copy()
y1 = df[["Wins"]].copy()

plt.scatter(x1, y1)
plt.title("ReturnGamesWon and Wins")
plt.xlabel("ReturnGamesWon")
plt.ylabel("Wins")
plt.show()
"""
"""
# TotalPointsWon and Wins (no correlational relationship)
x1 = df[["TotalPointsWon"]].copy()
y1 = df[["Wins"]].copy()

plt.scatter(x1, y1)
plt.title("TotalPointsWon and Wins")
plt.xlabel("TotalPointsWon")
plt.ylabel("Wins")
plt.show()
"""

"""
## perform single feature linear regressions here:
x1 = df[["ReturnGamesWon"]].copy()
y1 = df[["Wins"]].copy()

train_x, test_x, train_y, test_y = train_test_split(x1, y1, train_size=0.8)


# Make 0 (0.09)
model = LinearRegression()
model.fit(train_x, train_y)
print(model.score(test_x, test_y))
predict_y = model.predict(test_x)
plt.scatter(test_y, predict_y, alpha=0.4)
plt.show()
"""

"""
## perform single feature linear regressions here:
x1 = df[["ServiceGamesWon"]].copy()
y1 = df[["Wins"]].copy()

train_x, test_x, train_y, test_y = train_test_split(x1, y1, train_size=0.8)

# Make 1 (0.138)
model = LinearRegression()
model.fit(train_x, train_y)
print(model.score(test_x, test_y))
predict_y = model.predict(test_x)
plt.scatter(test_y, predict_y, alpha=0.4)
plt.show()
"""
"""
## perform single feature linear regressions here:
x1 = df[["SecondServeReturnPointsWon"]].copy()
y1 = df[["Wins"]].copy()

train_x, test_x, train_y, test_y = train_test_split(x1, y1, train_size=0.8)

# Make 2 (0.03)
model = LinearRegression()
model.fit(train_x, train_y)
print(model.score(test_x, test_y))
predict_y = model.predict(test_x)
plt.scatter(test_y, predict_y, alpha=0.4)
plt.show()
"""
"""
# perform single feature linear regressions here:
x1 = df[["BreakPointsConverted"]].copy()
y1 = df[["Wins"]].copy()

train_x, test_x, train_y, test_y = train_test_split(x1, y1, train_size=0.8)

# Make 3 (-0.00)
model = LinearRegression()
model.fit(train_x, train_y)
print(model.score(test_x, test_y))
predict_y = model.predict(test_x)
plt.scatter(test_y, predict_y, alpha=0.4)
plt.show()
"""

"""
# perform single feature linear regressions here:
x1 = df[["ServiceGamesWon"]].copy()
y1 = df[["Winnings"]].copy()

train_x, test_x, train_y, test_y = train_test_split(x1, y1, train_size=0.8)

# Make 4 (0.16)
model = LinearRegression()
model.fit(train_x, train_y)
print(model.score(test_x, test_y))
predict_y = model.predict(test_x)
plt.scatter(test_y, predict_y, alpha=0.4)
plt.show()
"""

"""
# perform single feature linear regressions here:
x1 = df[["BreakPointsOpportunities"]].copy()
y1 = df[["Winnings"]].copy()

train_x, test_x, train_y, test_y = train_test_split(x1, y1, train_size=0.8)

# Make 5 (0.824)
model = LinearRegression()
model.fit(train_x, train_y)
print(model.score(test_x, test_y))
predict_y = model.predict(test_x)
plt.scatter(test_y, predict_y, alpha=0.4)
plt.show()
"""



## perform two feature linear regressions here:
"""
# Prepare Data
X = df[["BreakPointsOpportunities", "BreakPointsFaced"]].copy()
y = df[["Winnings"]].copy()

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)

# Train and Test (0.817)
model = LinearRegression()
model.fit(X_train, y_train)
print(model.score(X_test, y_test))
"""

"""
## perform multiple feature linear regressions here:
# Prepare Data
X = df[["BreakPointsOpportunities", "FirstServeReturnPointsWon"]].copy()
y = df[["Winnings"]].copy()

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)

# Train and Test (0.812)
model = LinearRegression()
model.fit(X_train, y_train)
print(model.score(X_test, y_test))
"""

# perform multiple feature linear regressions here:
# Prepare Data
X = df[["BreakPointsOpportunities", "Aces"]].copy()
y = df[["Winnings"]].copy()

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)

# Train and Test (0.866)
model = LinearRegression()
model.fit(X_train, y_train)
print(model.score(X_test, y_test))

# See the difference between actual and predicted y
y_predict = model.predict(X_test)
plt.scatter(y_test, y_predict, alpha=0.4)
plt.title("Scatter y_test and y_peidict")
plt.xlabel("y_test")
plt.ylabel("y_predict")
plt.show()


# EOF